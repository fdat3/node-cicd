workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"      
      when: never
    - when: always

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  DEV_SERVER_HOST: 18.138.231.213
  DEV_SERVER_ENDPOINT: http://ec2-18-138-231-213.ap-southeast-1.compute.amazonaws.com:3000
  STAGING_SERVER_HOST: 18.138.231.213
  STAGING_SERVER_ENDPOINT: http://ec2-18-138-231-213.ap-southeast-1.compute.amazonaws.com:4000
  
stages:
  - test
  - build
  - deploy_dev
  - deploy_staging

sast:
  stage: test


run_unit_test:
  image: node:17-alpine3.14
  stage: test
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - app/node_modules/
  tags:
    - ec2
    - docker
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml



run_lint_checks:
  stage: test
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - echo "Running lint checks"
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - app/node_modules/
    policy: pull


build_image:
  stage: build
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version-file.txt
  script:
    - docker build -t $IMAGE_NAME:$VERSION .
  artifacts:
    paths:
      - version-file.txt

push_image:
  stage: build
  dependencies:
    - build_image
  needs:
    - build_image
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - export VERSION=$(cat version-file.txt)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$VERSION

deploy_image_dev:
  stage: deploy_dev
  dependencies:
    - build_image
  needs:
    - build_image
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export VERSION=$(cat version-file.txt)
  script: 
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$DEV_SERVER_HOST:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$DEV_SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

        export COMPOSE_PROJECT_NAME=dev
        export DC_IMAGE_NAME=$IMAGE_NAME && 
        export DC_IMAGE_TAG=$VERSION  &&
        export DC_APP_PORT=3000 &&

        docker-compose down &&
        docker-compose up -d"
        
  environment:
    name: dev
    url: $DEV_SERVER_ENDPOINT

run_functional_tests:
  stage: deploy_dev
  needs:
    - deploy_image_dev
  script:
    - echo "running functional test"
  

deploy_image_staging:
  stage: deploy_staging
  dependencies:
    - build_image
  needs:
    - build_image
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export VERSION=$(cat version-file.txt)
  script: 
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$STAGING_SERVER_HOST:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$STAGING_SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

        export COMPOSE_PROJECT_NAME=staging
        export DC_IMAGE_NAME=$IMAGE_NAME && 
        export DC_IMAGE_TAG=$VERSION  &&
        export DC_APP_PORT=4000 &&

        docker-compose down &&
        docker-compose up -d"
        
  environment:
    name: staging
    url: $STAGING_SERVER_ENDPOINT

include:
  - template: Jobs/SAST.gitlab-ci.yml